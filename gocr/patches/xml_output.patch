Index: gocr-0.50/AUTHORS
===================================================================
--- gocr-0.50.orig/AUTHORS	2016-03-22 18:05:04.833746418 +0100
+++ gocr-0.50/AUTHORS	2016-03-22 18:05:04.825746419 +0100
@@ -5,3 +5,7 @@
 
 Bruno Barberi Gnecco <brunobg{at}users.sourceforge.net>
 	* Programmer
+
+Sylvain Giroudon <sylvain.giroudon{at}users.sourceforge.net>
+	* COSI extensions (Common OCR Service Interface)
+	  - XML output format options
Index: gocr-0.50/man/man1/gocr.1
===================================================================
--- gocr-0.50.orig/man/man1/gocr.1	2016-03-22 18:05:04.833746418 +0100
+++ gocr-0.50/man/man1/gocr.1	2016-03-22 18:05:04.825746419 +0100
@@ -48,6 +48,25 @@
 (ISO8859_1 TeX HTML XML UTF8 ASCII), XML will also output position and
 probability data 
 .TP
+\fB\-F\fR \fIfilter\fR
+set XML output format options. \fIfilter\fR is a bitfield (default=0):
+.in +5
+.B  1
+= hide character boxes (<box> and <space> elements).
+.in
+.in +5
+.B  2
+= hide detailed character info in <box> elements.
+.in
+.in +5
+.B  4
+= show packed character string for each line (<text> elements).
+.in
+.in +5
+.B 8
+= show box geometry in X11 format (geometry="\fIwidth\fRx\fIheight\fR+\fIx\fR+\fIy\fR")
+rather than in native GOCR format (x="\fIx\fR" y="\fIy\fR" dx="\fIwidth\fR" dy="\fIheight\fR").
+.TP
 \fB\-l\fR \fIlevel\fR
 set grey level to \fIlevel\fR (0<160<=255, default:
 0 for autodetect), darker pixels belong to characters, brighter pixels
Index: gocr-0.50/src/gocr.c
===================================================================
--- gocr-0.50.orig/src/gocr.c	2016-03-22 18:05:04.833746418 +0100
+++ gocr-0.50/src/gocr.c	2016-03-22 18:05:04.825746419 +0100
@@ -71,6 +71,7 @@
 	  " -p name   - database path including final slash (default is ./db/)\n");
   fprintf(stderr, /* string length less than 509 bytes for ISO C89 */
 	  " -f fmt    - output format (ISO8859_1 TeX HTML XML UTF8 ASCII)\n"
+	  " -F num    - output format options\n"
 	  " -l num    - threshold grey level 0<160<=255 (0 = autodetect)\n"
 	  " -d num    - dust_size (remove small clusters, -1 = autodetect)\n"
 	  " -s num    - spacewidth/dots (0 = autodetect)\n"
@@ -186,6 +187,10 @@
         fprintf(stderr,"Warning: unknown format (-f %s)\n",s1);
         i++;
         break;
+      case 'F': /* output filter */
+	job->cfg.out_filter = atoi(s1);
+        i++;
+        break;
       case 'c': /* list of chars (_ = not recognized chars) */
 	job->cfg.lc = s1;
 	i++;
Index: gocr-0.50/src/gocr.h
===================================================================
--- gocr-0.50.orig/src/gocr.h	2016-03-22 18:05:04.833746418 +0100
+++ gocr-0.50/src/gocr.h	2016-03-22 18:05:04.825746419 +0100
@@ -179,6 +179,7 @@
     int verbose; /* verbose mode; default value: 0 */ 
                  /* verbose option (see --help) */
     FORMAT out_format; /* output format; default value: ISO8859_1 */
+    int out_filter;    /* XML Output filter: 0=full 1=brief */
     char *lc; /* debuglist of chars (_ = not recognized chars) */
               /* default value: "_" */
     char *db_path; /* pathname for database; default value: NULL */
Index: gocr-0.50/src/job.c
===================================================================
--- gocr-0.50.orig/src/job.c	2016-03-22 18:05:04.833746418 +0100
+++ gocr-0.50/src/job.c	2016-03-22 18:05:04.825746419 +0100
@@ -37,6 +37,7 @@
   job->cfg.only_numbers = 0;
   job->cfg.verbose = 0;
   job->cfg.out_format = UTF8; /* old: ISO8859_1; */
+  job->cfg.out_filter = 0;
   job->cfg.lc = "_";
   job->cfg.db_path = (char*)NULL;
   job->cfg.cfilter = (char*)NULL;
Index: gocr-0.50/src/lines.c
===================================================================
--- gocr-0.50.orig/src/lines.c	2016-03-22 18:05:04.833746418 +0100
+++ gocr-0.50/src/lines.c	2016-03-23 10:48:44.007516690 +0100
@@ -2,6 +2,9 @@
 This is a Optical-Character-Recognition program
 Copyright (C) 2000-2010 Joerg Schulenburg
 
+XML output filter options added by Sylvain Giroudon
+for COSI support (Common OCR Service Interface).
+
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
@@ -29,6 +32,12 @@
 #include "unicode.h" /* decode() */
 #include "unicode_defs.h" /* UNKNOWN */
 
+
+#define XML_HIDE_CHAR   1
+#define XML_HIDE_INFO   2
+#define XML_SHOW_TEXT   4
+#define XML_SHOW_XGEOM  8
+
 const char *getTextLine (List *linelist, int line) {
   int i;
   Element *elem;
@@ -145,6 +154,22 @@
    ToDo: replacing by output_to_stream(FILE *ostream, int mo) ??
      can be used via pipes (if library) ???
  */
+
+static char *str_geometry(job_t *job, int x, int y, int width, int height)
+{
+  static char str[80];
+
+  if ( job->cfg.out_filter & XML_SHOW_XGEOM ) {
+    snprintf(str, sizeof(str), "geometry=\"%dx%d+%d+%d\"", width, height, x, y);
+  }
+  else {
+    snprintf(str, sizeof(str), "x=\"%d\" y=\"%d\" dx=\"%d\" dy=\"%d\"", x, y, width, height);
+  }
+
+  return str;
+}
+
+
 void store_boxtree_lines(job_t *job, int mo) {
   char *buffer;	/* temp buffer for text */
   int i = 0, j = 0;
@@ -156,7 +181,10 @@
   int line, line_gap, oldline=-1;
   int left_margin;
   int i1=0, i2=0;
+  char *text_buffer;
+  int text_len = 80;
 
+  /* Alloc document buffer */
   buffer = (char *)malloc(len);
   if ( !buffer ) { 
     fprintf(stderr,"malloc failed!\n"); // ToDo: index_to_error_list 
@@ -164,6 +192,14 @@
   }
   *buffer = 0;
 
+  /* Pre-alloc line text buffer */
+  text_buffer = (char *) malloc(text_len);
+  if ( text_buffer == NULL ) {
+    fprintf(stderr, "malloc failed!\n");
+    return;
+  }
+  *text_buffer = 0;
+
   if ( job->cfg.verbose&1 ) 
     fprintf(stderr,"# store boxtree to lines ...");
 
@@ -192,12 +228,16 @@
   if (job->cfg.out_format==XML) { /* subject of change */
     char s1[255]; /* ToDo: avoid potential buffer overflow !!! */
     /* output lot of usefull information for XML filter */
-    sprintf(s1,"<page x=\"%d\" y=\"%d\" dx=\"%d\" dy=\"%d\">\n",
-       0,0,0,0);
-    buffer=append_to_line(buffer,s1,&len);
-    sprintf(s1,"<block x=\"%d\" y=\"%d\" dx=\"%d\" dy=\"%d\">\n",
-       0,0,0,0);
-    buffer=append_to_line(buffer,s1,&len);
+    if ( job->cfg.out_filter & XML_HIDE_INFO ) {
+      buffer=append_to_line(buffer, "<page>\n", &len);
+    }
+    else {
+      sprintf(s1,"<page %s>\n", str_geometry(job, 0, 0, 0, 0));
+      buffer=append_to_line(buffer,s1,&len);
+
+      sprintf(s1,"<block %s>\n", str_geometry(job, 0, 0, 0, 0));
+      buffer=append_to_line(buffer,s1,&len);
+    }
   } 
 
   for_each_data(&(job->res.boxlist)) {
@@ -208,18 +248,26 @@
     if (box2->num_ac && box2->wac[0]<job->cfg.certainty) box2->c=UNKNOWN;
     if (line!=oldline) {
       if (job->cfg.out_format==XML && oldline>-1) { /* subject of change */
+	if ( job->cfg.out_filter & XML_SHOW_TEXT ) {
+	  buffer=append_to_line(buffer, " <text>", &len);
+	  buffer=append_to_line(buffer, text_buffer, &len);
+	  buffer=append_to_line(buffer, "</text>\n", &len);
+	}
         buffer=append_to_line(buffer,"</line>\n",&len);
         list_app( &(job->res.linelist), (void *)strdup(buffer) ); // wcsdup
         memset(buffer, 0, len);
+        memset(text_buffer, 0, text_len);
         j=0;  // reset counter for new line
       } 
       if (job->cfg.out_format==XML) { /* subject of change */
         char s1[255]; /* ToDo: avoid potential buffer overflow !!! */
         /* output lot of usefull information for XML filter */
-        sprintf(s1,"<line x=\"%d\" y=\"%d\" dx=\"%d\" dy=\"%d\" value=\"%d\">\n",
-           line_info.x0[line],line_info.m1[line],
-           line_info.x1[line]-line_info.x0[line]+1,
-           line_info.m4[line]-line_info.m1[line],line);
+        sprintf(s1,"<line %s value=\"%d\">\n",
+		str_geometry(job,
+			     line_info.x0[line], line_info.m1[line],
+			     line_info.x1[line]-line_info.x0[line]+1,
+			     line_info.m4[line]-line_info.m1[line]),
+		line);
         buffer=append_to_line(buffer,s1,&len);
       }
       oldline=line;
@@ -243,76 +291,120 @@
         j=0;  // reset counter for new line
       } 
     }
+
     if (box2->c == ' ')	// fill large gaps with spaces
     {
       if (job->res.avX) { /* avoid SIGFPE */
+	int iX = (box2->x1 - box2->x0) / (2 * job->res.avX) + 1;
+
         if (job->cfg.out_format==XML) { /* subject of change */
-          char s1[255]; /* ToDo: avoid potential buffer overflow !!! */
-          /* output lot of usefull information for XML filter */
-          sprintf(s1," <space x=\"%d\" y=\"%d\" dx=\"%d\" dy=\"%d\" />\n",
-                  box2->x0,box2->y0,box2->x1-box2->x0+1,box2->y1-box2->y0+1);
-          buffer=append_to_line(buffer,s1,&len);
-        } else
+	  if ( !(job->cfg.out_filter & XML_HIDE_CHAR) ) {
+	    char s1[255]; /* ToDo: avoid potential buffer overflow !!! */
+	    /* output lot of usefull information for XML filter */
+	    sprintf(s1," <space %s nchars=\"%d\" />\n",
+		    str_geometry(job, box2->x0,box2->y0,box2->x1-box2->x0+1,box2->y1-box2->y0+1),
+		    iX);
+	    buffer=append_to_line(buffer,s1,&len);
+	  }
+	  if ( job->cfg.out_filter & XML_SHOW_TEXT ) {
 // multi spacing is done now in pgm2asc using insert spaces 2010-09-28
-//        for (i = (box2->x1 - box2->x0 + 1) / (2 * job->res.avX) + 1; i > 0; i--) 
-        {
-          buffer=append_to_line(buffer," ",&len);
-          j++; /* number of chars in line */
+//          for (i = iX; i > 0; i--)
+	    {
+	      text_buffer = append_to_line(text_buffer, " ", &text_len);
+	    }
+	  }
         }
+	else {
+// multi spacing is done now in pgm2asc using insert spaces 2010-09-28
+//        for (i = iX; i > 0; i--)
+	  {
+	    buffer=append_to_line(buffer," ",&len);
+	    j++; /* number of chars in line */
+	  }
+	}
       }
     }
     else if (box2->c != '\n') {
       if (j==0 && job->res.avX) /* first char in new line? */ {
         int indent = box2->x0 - job->res.lines.x0[box2->line];
+	int iX = 0;
+
         /* correct for angle of page as a whole. */
         if (job->res.lines.dx)
           indent += box2->y0 * job->res.lines.dy / job->res.lines.dx;
         /* subtract the base margin. */
         indent -= left_margin;
-        if (job->cfg.out_format==XML) { /* subject of change */
-          char s1[255]; /* ToDo: avoid potential buffer overflow !!! */
-          /* output lot of usefull information for XML filter */
-          sprintf(s1," <space x=\"%d\" y=\"%d\" dx=\"%d\" dy=\"%d\" />\n",
-                  box2->x0,box2->y0,box2->x1-box2->x0+1,box2->y1-box2->y0+1);
-          buffer=append_to_line(buffer,s1,&len);
-        } else
+	if ( job->res.avX > 0 )
+	  iX = indent / job->res.avX;
+
+	if ( iX > 0 ) {
+	  if (job->cfg.out_format==XML) { /* subject of change */
+	    if ( !(job->cfg.out_filter & XML_HIDE_CHAR) ) {
+	      char s1[255]; /* ToDo: avoid potential buffer overflow !!! */
+	      /* output lot of usefull information for XML filter */
+	      sprintf(s1," <space %s nchars=\"%d\" />\n",
+		      str_geometry(job, box2->x0,box2->y0,box2->x1-box2->x0+1,box2->y1-box2->y0+1),
+		      iX);
+	      buffer=append_to_line(buffer,s1,&len);
+	    }
+	    if ( job->cfg.out_filter & XML_SHOW_TEXT ) {
 // ToDo: do the multi "\n" earlier in pgm2asc (like multi spacing)
-        for (i = indent / job->res.avX; i > 0; i--) {
-          buffer=append_to_line(buffer," ",&len); j++;
-        }
+	      for (i = iX; i > 0; i--) {
+		text_buffer = append_to_line(text_buffer, " ", &text_len);
+	      }
+	    }
+	  }
+	  else {
+// ToDo: do the multi "\n" earlier in pgm2asc (like multi spacing)
+	    for (i = iX; i > 0; i--) {
+	      buffer=append_to_line(buffer," ",&len); j++;
+	    }
+	  }
+	}
       }
+
+      /* Dump XML detailed character info (begin) */
       if (job->cfg.out_format==XML) { /* subject of change */
-        char s1[255]; /* ToDo: avoid potential buffer overflow !!! */
-        /* output lot of usefull information for XML filter */
-        sprintf(s1," <box x=\"%d\" y=\"%d\" dx=\"%d\" dy=\"%d\" value=\"",
-                box2->x0,box2->y0,box2->x1-box2->x0+1,box2->y1-box2->y0+1);
-        buffer=append_to_line(buffer,s1,&len);
-        if (box2->num_ac>1) { /* ToDo: output a list of alternatives */
-        }
+	if ( !(job->cfg.out_filter & XML_HIDE_CHAR) ) {
+	  char s1[255]; /* ToDo: avoid potential buffer overflow !!! */
+	  /* output lot of usefull information for XML filter */
+	  sprintf(s1," <box %s value=\"",
+		  str_geometry(job, box2->x0,box2->y0,box2->x1-box2->x0+1,box2->y1-box2->y0+1));
+	  buffer=append_to_line(buffer,s1,&len);
+	  if (box2->num_ac>1) { /* ToDo: output a list of alternatives */
+	  }
+	}
       }
-      if (box2->c != UNKNOWN  &&  box2->c != 0) {
-        buffer=
-          append_to_line(buffer,decode(box2->c,job->cfg.out_format),&len);
+
+      /* Dump current character */
+      if (box2->c != UNKNOWN && box2->c != 0) {
+	const char *s1 = decode(box2->c, job->cfg.out_format);
+	if ( (job->cfg.out_format!=XML) || !(job->cfg.out_filter & XML_HIDE_CHAR) )
+	  buffer = append_to_line(buffer, s1, &len);
+	text_buffer = append_to_line(text_buffer, s1, &text_len);
         if (box2->c >  ' ' &&
             box2->c <= 'z') i2++; /* count non-space chars */
       } else { /* c == UNKNOWN or 0 */
-        wchar_t cc; cc=box2->c;
+	char *s1 = "";
         if (box2->num_ac>0 && box2->tas[0]
           && (/* job->cfg.out_format!=XML || 2010-10 */ box2->tas[0][0]!='<')
           ) {  // 2010-10 output XML code after XML frame, see below!
-          /* output glued chars or ... (?) Jan08 */
-          buffer=append_to_line(buffer,box2->tas[0],&len);
+	  s1 = box2->tas[0];
           j+=strlen(box2->tas[0]);
         } // else 2010-10-07
         if (box2->num_ac == 0 || box2->c == UNKNOWN) {
           /* ToDo: leave string empty? set placeholder per option */
           /* output dummy string to mark UNKNOWN */
           if (job->cfg.unrec_marker[0])
-            buffer = append_to_line(buffer, job->cfg.unrec_marker, &len);
+	    s1 = job->cfg.unrec_marker;
         }
+	if ( (job->cfg.out_format!=XML) || !(job->cfg.out_filter & XML_HIDE_CHAR) )
+	  buffer = append_to_line(buffer, s1, &len);
+	text_buffer = append_to_line(text_buffer, s1, &text_len);
       }
-      if (job->cfg.out_format==XML) {
-        if (box2->num_ac>0) {
+      /* Dump XML detailed character info (end) */
+      if ( (job->cfg.out_format==XML) && !(job->cfg.out_filter & XML_HIDE_CHAR) ) {
+        if ( (box2->num_ac>0) && !(job->cfg.out_filter & XML_HIDE_INFO) ) {
           /* output alist ToDo: separate <altbox ...> */
           int i1; char s1[256];
           sprintf(s1,"\" numac=\"%d\" weights=\"",box2->num_ac);
@@ -336,6 +428,7 @@
         }
         buffer=append_to_line(buffer,"\" />\n",&len);
       }
+
       if (box2->num_ac && box2->tas[0]) {
         if (box2->tas[0][0]=='<') { /* output special XML object */ 
           buffer=append_to_line(buffer,box2->tas[0],&len);
@@ -348,12 +441,24 @@
     }
     i++;
   } end_for_each(&(job->res.boxlist));
+
+  /* Terminate XML document cleanly */
   if (job->cfg.out_format==XML && oldline>-1) { /* subject of change */
+    if ( job->cfg.out_filter & XML_SHOW_TEXT ) {
+      buffer=append_to_line(buffer, " <text>", &len);
+      buffer=append_to_line(buffer, text_buffer, &len);
+      buffer=append_to_line(buffer, "</text>\n", &len);
+    }
     buffer=append_to_line(buffer,"</line>\n",&len);
   } 
   if (job->cfg.out_format==XML) { /* subject of change */
-    buffer=append_to_line(buffer,"</block>\n</page>\n",&len);
-  } 
+    if ( !(job->cfg.out_filter & XML_HIDE_INFO) )
+      buffer=append_to_line(buffer,"</block>\n",&len);
+    buffer=append_to_line(buffer,"</page>\n",&len);
+  }
+
+  /* Free line text buffer */
+  free(text_buffer);
 
   /* do not forget last line */
   // is there no \n in the last line? If there is, delete next line.
