Index: ocrad-0.25/character.cc
===================================================================
--- ocrad-0.25.orig/character.cc	2016-03-22 17:08:16.001872637 +0100
+++ ocrad-0.25/character.cc	2016-03-22 17:08:15.997872637 +0100
@@ -347,6 +347,26 @@
   }
 
 
+void Character::mprint( const Control & control ) const
+{
+	unsigned char ch = UCS::map_to_byte( gv[0].code );
+	if (!ch)
+		ch = '_';
+	if (ch == ' ')
+		std::fputs( "      <space ", control.exportfile );
+	else
+		std::fputs( "      <box ", control.exportfile );
+
+	std::fprintf(control.exportfile, "geometry=\"%dx%d+%d+%d\"",
+		     width(), height(), left(), top());
+
+	if (ch != ' ')
+		std::fprintf(control.exportfile, " value=\"%c\"", ch);
+
+	std::fputs( " />\n", control.exportfile );
+}
+
+
 void Character::apply_filter( const Filter::Type filter )
   {
   if( !guesses() ) return;
Index: ocrad-0.25/common.h
===================================================================
--- ocrad-0.25.orig/common.h	2016-03-22 17:08:16.001872637 +0100
+++ ocrad-0.25/common.h	2016-03-22 17:08:15.997872637 +0100
@@ -85,10 +85,11 @@
   int debug_level;
   char filetype;
   bool utf8;
+  bool xml;
 
   Control()
     : outfile( stdout ), exportfile( 0 ),
-      debug_level( 0 ), filetype( '4' ), utf8( false ) {}
+      debug_level( 0 ), filetype( '4' ), utf8( false ), xml( false ) {}
   ~Control();
 
   bool add_filter( const char * const program_name, const char * const name );
Index: ocrad-0.25/main.cc
===================================================================
--- ocrad-0.25.orig/main.cc	2016-03-22 17:08:16.001872637 +0100
+++ ocrad-0.25/main.cc	2016-03-22 17:22:44.353840484 +0100
@@ -140,7 +140,7 @@
                "  -e, --filter=<name>       try '--filter=help' for a list of names\n"
                "  -E, --user-filter=<file>  user-defined filter, see manual for format\n"
                "  -f, --force               force overwrite of output file\n"
-               "  -F, --format=<fmt>        output format (byte, utf8)\n"
+               "  -F, --format=<fmt>        output format (byte, utf8, xml)\n"
                "  -i, --invert              invert image levels (white on black)\n"
                "  -l, --layout              perform layout analysis\n"
                "  -o, --output=<file>       place the output into <file>\n"
@@ -235,7 +235,19 @@
     if( control.debug_level == 0 )
       {
       if( control.outfile ) textpage.print( control );
-      if( control.exportfile ) textpage.xprint( control );
+      if( control.exportfile ) {
+	      if (control.xml) {
+		      std::fprintf(control.exportfile, "<document id=\"%s\" geometry=\"%dx%d+%d+%d\">\n",
+				   infile_name,
+				   page_image.width(), page_image.height(),
+				   page_image.left(), page_image.top());
+		      textpage.mprint(control);
+		      std::fputs( "</document>\n", control.exportfile );
+	      }
+	      else {
+		      textpage.xprint(control);
+	      }
+      }
       }
     }
   catch( Page_image::Error e ) { show_error( e.msg ); return 2; }
@@ -380,9 +392,12 @@
         return 1;
         }
       }
-    std::fprintf( control.exportfile,
-                  "# Ocr Results File. Created by %s version %s\n",
-                  Program_name, PROGVERSION );
+
+    if (!control.xml) {
+	    std::fprintf( control.exportfile,
+			  "# Ocr Results File. Created by %s version %s\n",
+			  Program_name, PROGVERSION );
+    }
     }
 
   // process any remaining command line arguments (input files)
Index: ocrad-0.25/character.h
===================================================================
--- ocrad-0.25.orig/character.h	2016-03-22 17:08:16.001872637 +0100
+++ ocrad-0.25/character.h	2016-03-22 17:08:15.997872637 +0100
@@ -83,6 +83,7 @@
   void dprint( const Control & control, const Rectangle & charbox,
                const bool graph, const bool recursive ) const;
   void xprint( const Control & control ) const;
+  void mprint( const Control & control ) const;
 
   void recognize1( const Charset & charset, const Rectangle & charbox );
   void apply_filter( const Filter::Type filter );
Index: ocrad-0.25/textpage.cc
===================================================================
--- ocrad-0.25.orig/textpage.cc	2016-03-22 17:08:16.001872637 +0100
+++ ocrad-0.25/textpage.cc	2016-03-22 17:08:15.997872637 +0100
@@ -548,3 +548,19 @@
     tb.xprint( control );
     }
   }
+
+
+void Textpage::mprint( const Control & control ) const
+{
+	if (!control.exportfile )
+		return;
+
+	std::fputs( "  <page>\n", control.exportfile );
+
+	for (int i = 0; i < textblocks(); ++i) {
+		const Textblock & tb = *(tbpv[i]);
+		tb.mprint( control );
+	}
+
+	std::fputs( "  </page>\n", control.exportfile );
+}
Index: ocrad-0.25/textblock.cc
===================================================================
--- ocrad-0.25.orig/textblock.cc	2016-03-22 17:08:16.001872637 +0100
+++ ocrad-0.25/textblock.cc	2016-03-22 17:08:15.997872637 +0100
@@ -521,6 +521,13 @@
   }
 
 
+void Textblock::mprint( const Control & control ) const
+{
+	for (int i = 0; i < textlines(); ++i)
+		tlpv[i]->mprint( control );
+}
+
+
 void Textblock::cmark( Page_image & page_image ) const
   {
   for( int i = 0; i < textlines(); ++i ) tlpv[i]->cmark( page_image );
Index: ocrad-0.25/textblock.h
===================================================================
--- ocrad-0.25.orig/textblock.h	2016-03-22 17:08:16.001872637 +0100
+++ ocrad-0.25/textblock.h	2016-03-22 17:08:15.997872637 +0100
@@ -37,6 +37,7 @@
   void print( const Control & control ) const;
   void dprint( const Control & control, bool graph, bool recursive ) const;
   void xprint( const Control & control ) const;
+  void mprint( const Control & control ) const;
   void cmark( Page_image & page_image ) const;
   void lmark( Page_image & page_image ) const;
   };
Index: ocrad-0.25/textline.cc
===================================================================
--- ocrad-0.25.orig/textline.cc	2016-03-22 17:08:16.001872637 +0100
+++ ocrad-0.25/textline.cc	2016-03-22 17:08:15.997872637 +0100
@@ -328,6 +328,39 @@
   }
 
 
+void Textline::mprint( const Control & control ) const
+{
+	int x0 = -1;
+	int y0 = -1;
+	int x1 = 0;
+	int y1 = 0;
+
+	/* Compute line geometry */
+	for (int i = 0; i < characters(); ++i) {
+		if ((x0 < 0) || (cpv[i]->left() < x0))
+			x0 = cpv[i]->left();
+		if (cpv[i]->right() > x1)
+			x1 = cpv[i]->right();
+		if ((y0 < 0) || (cpv[i]->top() < y0))
+			y0 = cpv[i]->top();
+		if (cpv[i]->bottom() > y1)
+			y1 = cpv[i]->bottom();
+	}
+
+	/* Ensure the line actually exists */
+	if ((x0 < 0) || (y0 < 0))
+		return;
+
+	std::fprintf(control.exportfile, "    <line geometry=\"%dx%d+%d+%d\">\n",
+		     x1-x0+1, y1-y0+1, x0, y0);
+
+	for (int i = 0; i < characters(); ++i)
+		cpv[i]->mprint(control);
+
+	std::fputs( "    </line>\n", control.exportfile );
+}
+
+
 void Textline::cmark( Page_image & page_image ) const
   {
   for( int i = 0; i < characters(); ++i )
Index: ocrad-0.25/textline.h
===================================================================
--- ocrad-0.25.orig/textline.h	2016-03-22 17:08:16.001872637 +0100
+++ ocrad-0.25/textline.h	2016-03-22 17:08:15.997872637 +0100
@@ -59,6 +59,7 @@
   void dprint( const Control & control, const bool graph,
                const bool recursive ) const;
   void xprint( const Control & control ) const;
+  void mprint( const Control & control ) const;
   void cmark( Page_image & page_image ) const;
 
   void recognize1( const Charset & charset ) const;
Index: ocrad-0.25/textpage.h
===================================================================
--- ocrad-0.25.orig/textpage.h	2016-03-22 17:08:16.001872637 +0100
+++ ocrad-0.25/textpage.h	2016-03-22 17:08:15.997872637 +0100
@@ -37,4 +37,5 @@
 
   void print( const Control & control ) const;
   void xprint( const Control & control ) const;
+  void mprint( const Control & control ) const;
   };
Index: ocrad-0.25/common.cc
===================================================================
--- ocrad-0.25.orig/common.cc	2016-03-22 17:23:56.377837817 +0100
+++ ocrad-0.25/common.cc	2016-03-22 17:24:05.161837492 +0100
@@ -208,5 +208,6 @@
   {
   if( std::strcmp( name, "byte" ) == 0 ) { utf8 = false; return true; }
   if( std::strcmp( name, "utf8" ) == 0 ) { utf8 = true; return true; }
+  if( std::strcmp( name, "xml" ) == 0 ) { xml = true; return true; }
   return false;
   }
