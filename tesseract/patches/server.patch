Index: tesseract-2.04/ccmain/Makefile.am
===================================================================
--- tesseract-2.04.orig/ccmain/Makefile.am
+++ tesseract-2.04/ccmain/Makefile.am
@@ -15,7 +15,7 @@ include_HEADERS = \
     control.h docqual.h expandblob.h fixspace.h fixxht.h \
     imgscale.h matmatch.h output.h paircmp.h reject.h scaleimg.h \
     tessbox.h tessedit.h tesseractmain.h tessvars.h tfacep.h \
-    pagewalk.h pgedit.h varabled.h \
+    pagewalk.h pgedit.h varabled.h server.h \
     tessembedded.h tessio.h tfacepp.h tstruct.h werdit.h
 
 lib_LIBRARIES = libtesseract_main.a libtesseract_full.a
@@ -58,6 +58,6 @@ libtesseract_full.a : libtesseract_full.
 	ar cru libtesseract_full.a libtesseract_full.o ; ranlib libtesseract_full.a
 
 bin_PROGRAMS = tesseract
-tesseract_SOURCES = tesseractmain.cpp
+tesseract_SOURCES = tesseractmain.cpp server.cpp
 tesseract_LDADD = \
     libtesseract_full.a
Index: tesseract-2.04/ccmain/Makefile.in
===================================================================
--- tesseract-2.04.orig/ccmain/Makefile.in
+++ tesseract-2.04/ccmain/Makefile.in
@@ -77,7 +77,7 @@ am_libtesseract_main_a_OBJECTS = tessedi
 libtesseract_main_a_OBJECTS = $(am_libtesseract_main_a_OBJECTS)
 binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
 PROGRAMS = $(bin_PROGRAMS)
-am_tesseract_OBJECTS = tesseractmain.$(OBJEXT)
+am_tesseract_OBJECTS = tesseractmain.$(OBJEXT) server.$(OBJEXT)
 tesseract_OBJECTS = $(am_tesseract_OBJECTS)
 tesseract_DEPENDENCIES = libtesseract_full.a
 DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
@@ -226,7 +226,7 @@ include_HEADERS = \
     control.h docqual.h expandblob.h fixspace.h fixxht.h \
     imgscale.h matmatch.h output.h paircmp.h reject.h scaleimg.h \
     tessbox.h tessedit.h tesseractmain.h tessvars.h tfacep.h \
-    pagewalk.h pgedit.h varabled.h \
+    pagewalk.h pgedit.h varabled.h server.h \
     tessembedded.h tessio.h tfacepp.h tstruct.h werdit.h
 
 lib_LIBRARIES = libtesseract_main.a libtesseract_full.a
@@ -241,7 +241,7 @@ libtesseract_main_a_SOURCES = \
     tfacepp.cpp tstruct.cpp werdit.cpp
 
 libtesseract_full_a_SOURCES = tesseractfull.cc
-tesseract_SOURCES = tesseractmain.cpp
+tesseract_SOURCES = tesseractmain.cpp server.cpp
 tesseract_LDADD = \
     libtesseract_full.a
 
Index: tesseract-2.04/ccmain/pgedit.cpp
===================================================================
--- tesseract-2.04.orig/ccmain/pgedit.cpp
+++ tesseract-2.04/ccmain/pgedit.cpp
@@ -753,6 +753,8 @@ void pgeditor_read_file(                
 
                                  // ptr to last dot
   filename_extension = strrchr(name.string(), '.');
+  if ( filename_extension == NULL )
+    filename_extension = "";
   #ifdef __UNIX__
   /*    TEXTROW*                tessrows;
       TBLOB*                  tessblobs;
Index: tesseract-2.04/ccmain/server.cpp
===================================================================
--- /dev/null
+++ tesseract-2.04/ccmain/server.cpp
@@ -0,0 +1,284 @@
+/**********************************************************************
+ * This is the COSI server mode management for
+ * for the TESSERACT Optical-Character-Recognition program
+ * Copyright (C) 2007-2010 Sylvain Giroudon
+ *
+ * File:        server.cpp
+ * Description: Main processing loop for the COSI server mode
+ * Author:      Sylvain Giroudon
+ * Created:     Fri Feb 22 2008
+ *
+ * This file is a add-on to the TESSERACT source tree,
+ * (C) Copyright 1992, Hewlett-Packard Ltd.
+ ** Licensed under the Apache License, Version 2.0 (the "License");
+ ** you may not use this file except in compliance with the License.
+ ** You may obtain a copy of the License at
+ ** http://www.apache.org/licenses/LICENSE-2.0
+ ** Unless required by applicable law or agreed to in writing, software
+ ** distributed under the License is distributed on an "AS IS" BASIS,
+ ** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ ** See the License for the specific language governing permissions and
+ ** limitations under the License.
+ *
+ **********************************************************************/
+
+#include <stdio.h>
+#include <errno.h>
+#include <sys/shm.h>
+
+#include "varabled.h"
+#include "baseapi.h"
+
+
+typedef struct {
+  unsigned int width, height;          /* RGB frame size */
+  unsigned int bpp, rowstride;
+  unsigned char buf[1];                /* RGB frame buffer */
+} cosi_buf_t;
+
+
+typedef struct {
+  int x, y;                   /* Window position */
+  unsigned int width, height; /* Window size */
+} cosi_geometry_t;
+
+
+static cosi_buf_t *cosi_buf_map(int shmid)
+{
+  void *ptr;
+
+  if ( (ptr = shmat(shmid, NULL, SHM_RDONLY)) == (void *) -1 ) {
+    fprintf(stderr, "Tesseract server: shmat(%d): %s\n", shmid, strerror(errno));
+    return NULL;
+  }
+
+  return (cosi_buf_t *) ptr;
+}
+
+
+static void cosi_geometry_parse(char *str, cosi_geometry_t *g)
+{
+  char *s = strdup(str);
+  char *sx, *sy;
+  char *sheight;
+
+  /* Retrieve window size */
+  if ( (sheight = strchr(s, 'x')) != NULL ) {
+    char cx;
+    int v;
+
+    *(sheight++) = '\0';
+    v = atoi(s);
+    if ( v < 0 )
+      v = 0;
+    g->width = v;
+
+    sx = sheight;
+    while ( (*sx != '\0') && (*sx != '+') && (*sx != '-') )
+      sx++;
+
+    cx = *sx;
+    *sx = '\0';
+    v = atoi(sheight);
+    *sx = cx;
+
+    if ( v < 0 )
+      v = 0;
+    g->height = v;
+  }
+  else {
+    sx = s;
+  }
+
+  /* Retrieve window position */
+  sy = sx;
+  while ( (*sy == '+') || (*sy == '-') )
+    sy++;
+  while ( (*sy != '\0') && (*sy != '+') && (*sy != '-') )
+    sy++;
+
+  if ( *sy != '\0' ) {
+    g->y = atoi(sy);
+    *sy = '\0';
+  }
+
+  g->x = atoi(sx);
+
+  free(s);
+}
+
+
+static char *cosi_geometry_str(cosi_geometry_t *g)
+{
+  static char str[32];
+  snprintf(str, sizeof(str), "%ux%u+%d+%d", g->width, g->height, g->x, g->y);
+  return str;
+}
+
+
+static char *server_attr_parse(char *s, char **name, char **value)
+{
+  *name = NULL;
+  *value = NULL;
+
+  /* Strip leading blanks */
+  while ( (*s != '\0') && (*s <= ' ') )
+    s++;
+
+  if ( *s == '\0' )
+    return s;
+
+  /* Extract the attr name just before the equal sign (if any) */
+  *name = s;
+  while ( (*s > ' ') && (*s != '=') )
+    s++;
+
+  if ( *s == '=' )
+    *value = s+1;
+  else
+    *value = NULL;
+
+  if ( *s != '\0' )
+    *(s++) = '\0';
+
+  /* Extract the attr value (if any) */
+  if ( *value != NULL ) {
+    if ( *s == '"' ) {
+      (*value)++;
+      s++;
+
+      while ( (*s != '\0') && (*s != '"') )
+	s++;
+    }
+    else {
+      while ( *s > ' ' )
+	s++;
+    }
+
+    if ( *s != '\0' )
+      *(s++) = '\0';
+  }
+
+  /* Strip trailing blanks */
+  while ( (*s != '\0') && (*s <= ' ') )
+    s++;
+
+  return s;
+}
+
+
+int server_loop(char *input, char *output)
+{
+  int shmid;
+  cosi_buf_t *fb;
+  char command[80];
+
+  /* Retrieve shm id as input file name */
+  shmid = atoi(input);
+  fb = cosi_buf_map(shmid);
+  if ( fb == NULL )
+    return 1;
+
+  fprintf(stderr, "Tesseract server: shmid=%d %dx%d\n", shmid, fb->width, fb->height);
+
+  /* Disable output buffering */
+  setbuf(stdout, NULL);
+
+  while ( fgets(command, sizeof(command), stdin) != NULL ) {
+    char *id = NULL;
+    cosi_geometry_t g = {
+      x      : 0,
+      y      : 0,
+      width  : fb->width,
+      height : fb->height
+    };
+    int makebox = 0;
+    char *s;
+    char *text;
+
+    /* Strip leading blanks */
+    s = command;
+    while ( *s != '\0' ) {
+      char *attr_name, *attr_value;
+
+      /* Parse current request parameter */
+      s = server_attr_parse(s, &attr_name, &attr_value);
+
+      if ( attr_name != NULL ) {
+	if ( strcmp(attr_name, "id") == 0 ) {
+	  id = attr_value;
+	}
+	else if ( strcmp(attr_name, "geometry") == 0 ) {
+	  cosi_geometry_parse(attr_value, &g);
+	}
+	else if ( strcmp(attr_name, "makebox") == 0 ) {
+	  if ( attr_value != NULL )
+	    makebox = atoi(attr_value);
+	  else
+	    makebox = 1;
+	}
+	else {
+	  /* Unrecognised attributes are ignored silently */
+	}
+      }
+    }
+
+    // Dump response prologue
+    printf("<document");
+    if ( id != NULL )
+      printf(" id=\"%s\"", id);
+    printf(" geometry=\"%s\"", cosi_geometry_str(&g));
+    if ( makebox )
+      printf(" makebox=\"1\"");
+    printf(">\n");
+
+    // Perform OCR on requested window with the requested output format
+    if ( makebox ) {
+      text = TessBaseAPI::TesseractRectBoxes(fb->buf,
+					     fb->bpp,
+					     fb->rowstride,
+					     g.x, g.y,
+					     g.width, g.height,
+					     fb->height);
+    }
+    else {
+      text = TessBaseAPI::TesseractRectXML(fb->buf,
+					   fb->bpp,
+					   fb->rowstride,
+					   g.x, g.y,
+					   g.width, g.height);
+    }
+
+    // Dump OCR result
+    if ( makebox ) {
+      STRING outfile;
+
+      if ( id != NULL )
+	outfile = id;
+      else
+	outfile = "output";
+
+      outfile += ".txt";
+
+      FILE* fp = fopen(outfile.string(), "w");
+      if ( fp != NULL ) {
+	printf(" <boxfile>%s</boxfile>\n", outfile.string());
+	fwrite(text, 1, strlen(text), fp);
+	fclose(fp);
+      }
+      else {
+	fprintf(stderr, "Cannot create boxfile %s: %s\n", outfile.string(), strerror(errno));
+      }
+    }
+    else {
+      fwrite(text, 1, strlen(text), stdout);
+    }
+
+    delete [] text;
+
+    // Dump response epilogue
+    printf("</document>\n");
+  }
+
+  return 0;
+}
Index: tesseract-2.04/ccmain/server.h
===================================================================
--- /dev/null
+++ tesseract-2.04/ccmain/server.h
@@ -0,0 +1,30 @@
+/**********************************************************************
+ * This is the COSI server mode management for
+ * for the TESSERACT Optical-Character-Recognition program
+ * Copyright (C) 2007-2010 Sylvain Giroudon
+ *
+ * File:        server.cpp
+ * Description: Main processing loop for the COSI server mode
+ * Author:      Sylvain Giroudon
+ * Created:     Fri Feb 22 2008
+ *
+ * This file is a add-on to the TESSERACT source tree,
+ * (C) Copyright 1992, Hewlett-Packard Ltd.
+ ** Licensed under the Apache License, Version 2.0 (the "License");
+ ** you may not use this file except in compliance with the License.
+ ** You may obtain a copy of the License at
+ ** http://www.apache.org/licenses/LICENSE-2.0
+ ** Unless required by applicable law or agreed to in writing, software
+ ** distributed under the License is distributed on an "AS IS" BASIS,
+ ** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ ** See the License for the specific language governing permissions and
+ ** limitations under the License.
+ *
+ **********************************************************************/
+
+#ifndef __SERVER_H__
+#define __SERVER_H__
+
+extern int server_loop(char *input, char *output);
+
+#endif // __SERVER_H__
Index: tesseract-2.04/ccmain/tesseractmain.cpp
===================================================================
--- tesseract-2.04.orig/ccmain/tesseractmain.cpp
+++ tesseract-2.04/ccmain/tesseractmain.cpp
@@ -36,6 +36,7 @@
 #include "blread.h"
 #include "tfacep.h"
 #include "callnet.h"
+#include "server.h"
 
 /*
 ** Include automatically generated configuration file if running autoconf
@@ -67,6 +68,7 @@ EXTERN INT_VAR (tessedit_page_number, -1
 EXTERN BOOL_VAR (tessedit_write_images, FALSE,
 "Capture the image from the IPE");
 EXTERN BOOL_VAR (tessedit_debug_to_screen, FALSE, "Dont use debug file");
+EXTERN BOOL_EVAR (server_mode, FALSE, "Enable OCR server mode");
 
 extern inT16 XOFFSET;
 extern inT16 YOFFSET;
@@ -179,6 +181,13 @@ int main(int argc, char **argv) {
                                   argc - arg - 1, argv + arg + 1);
   TessBaseAPI::SetInputName(argv[1]);
 
+  // Enter OCR server loop if server mode is enabled
+  if ( server_mode ) {
+    int ret = server_loop(argv[1], argv[2]);
+    TessBaseAPI::End();
+    return ret;
+  }
+
   tprintf ("Tesseract Open Source OCR Engine\n");
 
   IMAGE image;
Index: tesseract-2.04/tessdata/configs/Makefile.am
===================================================================
--- tesseract-2.04.orig/tessdata/configs/Makefile.am
+++ tesseract-2.04/tessdata/configs/Makefile.am
@@ -1,3 +1,3 @@
 datadir = @datadir@/tessdata/configs
-data_DATA = inter makebox box.train unlv api_config kannada box.train.stderr
-EXTRA_DIST = inter makebox box.train unlv api_config kannada box.train.stderr
+data_DATA = inter makebox box.train unlv api_config kannada box.train.stderr server
+EXTRA_DIST = inter makebox box.train unlv api_config kannada box.train.stderr server
Index: tesseract-2.04/tessdata/configs/Makefile.in
===================================================================
--- tesseract-2.04.orig/tessdata/configs/Makefile.in
+++ tesseract-2.04/tessdata/configs/Makefile.in
@@ -157,8 +157,8 @@ sysconfdir = @sysconfdir@
 target_alias = @target_alias@
 top_builddir = @top_builddir@
 top_srcdir = @top_srcdir@
-data_DATA = inter makebox box.train unlv api_config kannada box.train.stderr
-EXTRA_DIST = inter makebox box.train unlv api_config kannada box.train.stderr
+data_DATA = inter makebox box.train unlv api_config kannada box.train.stderr server
+EXTRA_DIST = inter makebox box.train unlv api_config kannada box.train.stderr server
 all: all-am
 
 .SUFFIXES:
Index: tesseract-2.04/tessdata/configs/server
===================================================================
--- /dev/null
+++ tesseract-2.04/tessdata/configs/server
@@ -0,0 +1 @@
+server_mode 1
